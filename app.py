# This file generated by Quarto; do not edit by hand.
# shiny_mode: core

from __future__ import annotations

from pathlib import Path
from shiny import App, Inputs, Outputs, Session, ui




def server(input: Inputs, output: Outputs, session: Session) -> None:
    from shiny import App, ui, reactive, render
    import plotly.graph_objects as go
    import pandas as pd

    # ------------------------
    # 1. 데이터 로드
    # ------------------------
    df_lamp = pd.read_csv('가로등위험도최종데이터.csv')
    df_cctv = pd.read_csv('cctv최종데이터.csv')
    df_school = pd.read_csv('학교최종데이터.csv')
    df_kickrani = pd.read_excel('kickrani.xlsx', header=1)

    # ------------------------
    # 2. UI 정의
    # ------------------------
    app_ui = ui.page_fluid(
        ui.h1("안전한 야간운전을 위한 위험구역 시각화", style="text-align:center; margin-bottom:30px;"),

        ui.row(
            ui.column(3,  # 사이드바
                ui.h3("표시할 시설 선택"),
                ui.input_checkbox_group(
                    "facility",
                    "시설",
                    choices=["가로등", "CCTV", "학교", "킥라니"],
                    selected=["가로등", "CCTV", "학교", "킥라니"]
                )
            ),
            ui.column(9,  # 메인
                ui.output_plot("map_plot")
            )
        )
    )

    # ------------------------
    # 3. Server 정의
    # ------------------------
    def server(input, output, session):

        @reactive.Calc
        def selected_facilities():
            return input.facility()

        @output
        @render.plot
        def map_plot():
            fig = go.Figure()
            selected = selected_facilities()

            if "가로등" in selected:
                fig.add_trace(go.Scattermapbox(
                    lat=df_lamp['위도'],
                    lon=df_lamp['경도'],
                    mode='markers',
                    marker=dict(size=7, color='yellow', opacity=0.5),
                    text=df_lamp['설치형태'] + '<br>위험도: ' + df_lamp['위험도(100점)'].astype(str),
                    name='가로등'
                ))

            if "CCTV" in selected:
                fig.add_trace(go.Scattermapbox(
                    lat=df_cctv['위도'],
                    lon=df_cctv['경도'],
                    mode='markers',
                    marker=dict(size=10, color='green', opacity=0.6),
                    name='CCTV'
                ))

            if "학교" in selected:
                fig.add_trace(go.Scattermapbox(
                    lat=df_school['lat'],
                    lon=df_school['lon'],
                    mode='markers',
                    marker=dict(size=10, color='purple', opacity=0.6),
                    text=df_school['구분'],
                    name='학교'
                ))

            if "킥라니" in selected:
                fig.add_trace(go.Scattermapbox(
                    lat=df_kickrani['위도'],
                    lon=df_kickrani['경도'],
                    mode='markers',
                    marker=dict(size=10, color='black', opacity=0.6),
                    text=df_kickrani['주차가능 대수'].astype(str),
                    name='킥라니'
                ))

            fig.update_layout(
                mapbox_style="open-street-map",
                mapbox_zoom=12,
                mapbox_center={"lat": df_lamp['위도'].mean(), "lon": df_lamp['경도'].mean()},
                height=800,
                margin={"r":0,"t":0,"l":0,"b":0},
                legend=dict(title="시설 종류", orientation="h")
            )

            return fig

    # ------------------------
    # 4. App 실행
    # ------------------------
    app = App(app_ui, server)

    # ========================================================================



    return None


_static_assets = ["dashboard_files","cheonan_data\\dashboard_files\\libs\\quarto-html\\tippy.css","cheonan_data\\dashboard_files\\libs\\quarto-html\\quarto-syntax-highlighting-37eea08aefeeee20ff55810ff984fec1.css","cheonan_data\\dashboard_files\\libs\\quarto-html\\quarto-syntax-highlighting-dark-2fef5ea3f8957b3e4ecc936fc74692ca.css","cheonan_data\\dashboard_files\\libs\\bootstrap\\bootstrap-icons.css","cheonan_data\\dashboard_files\\libs\\bootstrap\\bootstrap-f547ca9f9d437787137f2e2308b6cde4.min.css","cheonan_data\\dashboard_files\\libs\\bootstrap\\bootstrap-dark-f547ca9f9d437787137f2e2308b6cde4.min.css","cheonan_data\\dashboard_files\\libs\\clipboard\\clipboard.min.js","cheonan_data\\dashboard_files\\libs\\quarto-html\\quarto.js","cheonan_data\\dashboard_files\\libs\\quarto-html\\tabsets\\tabsets.js","cheonan_data\\dashboard_files\\libs\\quarto-html\\popper.min.js","cheonan_data\\dashboard_files\\libs\\quarto-html\\tippy.umd.min.js","cheonan_data\\dashboard_files\\libs\\quarto-html\\anchor.min.js","cheonan_data\\dashboard_files\\libs\\bootstrap\\bootstrap.min.js","cheonan_data\\dashboard_files\\libs\\quarto-dashboard\\quarto-dashboard.js","cheonan_data\\dashboard_files\\libs\\quarto-dashboard\\stickythead.js","cheonan_data\\dashboard_files\\libs\\quarto-dashboard\\web-components.js","cheonan_data\\dashboard_files\\libs\\quarto-dashboard\\components.js"]
_static_assets = {"/" + sa: Path(__file__).parent / sa for sa in _static_assets}

app = App(
    Path(__file__).parent / "dashboard.html",
    server,
    static_assets=_static_assets,
)
